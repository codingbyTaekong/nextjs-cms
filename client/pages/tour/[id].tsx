import type { GetServerSideProps, NextPage } from 'next'
import React from 'react';
import dynamic from 'next/dynamic'
import { useRef } from 'react';
import { useEffect } from 'react';
import useKrpano from 'react-krpano-hooks'
import { useState } from 'react';
import Head from 'next/head'
import KrpanoHotspots from '../../components/KrpanoHotspots'
import { callKrpano, _krapno } from '../../middleware/CallKrpano';
import axios from '../../api/axios';
import { Layout, Button, Checkbox, Form, Input } from "antd";

interface krapnoProps {
    containerRef : any
    krpanoState: any
    getKrpano : any
}

interface Props {
    ref : any
    setLoaded : any
    data : {
        callback : number
        context : {
            idx : number,
            xml_path : string
        }
    }
    // _getKrpano : any
}

const KrpanoWithNoSSR = dynamic( async ()=> {
    return function krpano ({ref, setLoaded, data} : Props) {
        const initFc = callKrpano({
            scriptPath : "/krpano/krpano.js",
            embeddingParams : {
                xml: data.context.xml_path,
                target: 'react-krpano',
                html: 'prefer'
            },
            _handleLoaded : () => {
                console.log("로딩 완료")
                // console.log(_krapno.containerRef)
                // if (_krapno.containerRef) {
                //     setLoaded(true)
                // }else {
                //     console.log("아직 로딩중")
                // }
                // setTimeout(()=> {
                    setLoaded(true)    
                // }, 1000)
            }
        })
        initFc.then((res : any) => {
            console.log("가짜로딩완료");
            
        }).catch(err=> {
            console.log(err)
        })
        return <div id="krpano" ref={_krapno.containerRef}></div>
    }
}, {ssr : false})

interface PageProps {
    data : {
        callback : number
        context : {
            idx : number,
            xml_path : string
        }
    }
}

const tour : NextPage<PageProps> = ({data}) => {
    console.log(data)
    const test = useRef<any>(null);
    const [loaded, setLoaded] = useState(false);
  return (
    <>
        <Head>
            <title>투어리스트</title>
            <meta name="description" content="Generated by create next app" />
        </Head>
        <Layout>
            <KrpanoWithNoSSR ref={test} setLoaded={setLoaded} data={data} />
            {loaded && <KrpanoHotspots />}
        </Layout>
    </>
  );
}


export const getServerSideProps : GetServerSideProps = async (context) => {
    const id = context.params?.id;
    if (!id) {
        console.log("404예정")
    }
    const data = await (await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/tour/get_tour`, {params : {id }})).data;
    return {
        props : {
            data : data
        }
    }
}

export default tour;